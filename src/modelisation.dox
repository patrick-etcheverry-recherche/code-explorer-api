/*! \page modele-code Classes de haut niveau

 Cette partie du diagramme décrit les éléments de haut niveau structurant un code source :

 \n
  \image html 2-diagramme-classes-code.jpg  width=90%
  \image rtf 2-diagramme-classes-code.jpg  width=90%
  \image latex 2-diagramme-classes-code.pdf width=\textwidth 


 \section classe-code La classe Code
 - Un Code est écrit dans un fichier ;
 - Un Code peut être décrit par un Commentaire situé en entête ;
 - Un Code peut utiliser des Librairie ;
 - Un Code est composé d'Information et de Traitement.

 \section classe-information La classe Information
 - Une Information possède un Type (entier, chaîne de caractères...) ;
 - Une Information peut prendre la forme d'une Constante, d'une ValeurEnDur ou d'une Variable ;
 - Une Information peut jouer le rôle de donnée pour un Traitement spécifique ;
 - Une Information peut jouer le rôle de résultat pour un Traitement spécifique.

 \section classe-variable La classe Variable
 - Une Variable peut être une VariableSimple (l'âge d'une personne par exemple) 
   ou une VariableStructuree (l'adresse d'une personne par exemple);
 - Une VariableSimple peut *éventuellement* jouer le rôle d'un Accumulateur, 
   d'un Compteur ou d'un IndiceDeBoucle ;
 - Une VariableStructuree est composée de plusieurs Variable qui peuvent à leur tour 
   être des VariableSimple ou des VariableStructuree. Cette structuration permet de représenter 
   des enregistrements, des types énumérés, des tableaux, des classes...

 \section classe-traitement La classe Traitement
 - Un Traitement peut être ordonné séquentiellement (avant / après) vis-à-vis d'un autre Traitement ; 
 - Un Traitement peut nécessiter des Information en donnée ;
 - un Traitement peut produire des Information en résultat ;
 - Un Traitement peut être un TraitementSimple (une instruction) ou un TraitementCompose ;
 - Un TraitementSimple est soit une instruction d'entrée (une saisie par exemple), 
   soit une instruction de sortie (un affichage par exemple), soit une instruction de calcul (une affectation par exemple) ; 
 - Un TraitementCompose est composé de plusieurs Traitement qui peuvent à leur tour 
   être des TraitementSimple ou des TraitementCompose.
*/
 




/*! \page modele-structure-de-controle Structures de contrôle
 Cette partie du diagramme décrit les caractéristiques des structures de contrôle qu'on peut retrouver dans un code.

 \n
  \image html 3-diagramme-classes-structure-controle.jpg  width=90%
  \image rtf 3-diagramme-classes-structure-controle.jpg  width=90%
  \image latex 3-diagramme-classes-structure-controle.pdf width=\textwidth 
\n

 \section classe-structure-controle La classe StructureDeControle
 - Une StructureDeControle peut être une StructureSimple ou une StructureImbriquee ;
 - Une StructureSimple est soit une StructureConditionnelle soir une StructureIterative ;
 - Une StructureImbriquee est une StructureDeControle contenant une ou plusieurs StructureDeControle
    qui, à leur tour, peuvent être des StructureSimple ou à nouveau des StructureImbriquee.
*/





/*! \page modele-structure-conditionnelle Structures conditionnelles
 Cette partie du diagramme décrit les caractéristiques des structures conditionnelles qu'on peut retrouver dans un code.

 \n
  \image html 4-diagramme-classes-structure-conditionnelle.jpg  width=65%
  \image rtf 4-diagramme-classes-structure-conditionnelle.jpg  width=65%
  \image latex 4-diagramme-classes-structure-conditionnelle.pdf width=\textwidth 
\n

 \section classe-structure-conditionnelle La classe StructureConditionnelle
  Une StructureConditionnelle est :
  - soit une StructureSi,
  - soit une StructureSiSinon, 
  - soit une StructureSiSiSinon, 
  - soit une StructureSwitch.

 \section classe-structure-si La classe StructureSi
  - La classe StructureSi représente une structure conditionnelle simple (pas de sinon).
  - Une StructureSi est composée d'une ConditionSi qui prend la forme d'une expression booléene;
  - Si l'expression booléenne de la ConditionSi est vérifiée, la ConditionSi déclenche alors l'exécution 
    d'un ou plusieurs Traitement. 

 \section classe-structure-si-sinon La classe StructureSiSinon
  - La classe StructureSiSinon représente une structure conditionnelle de type \c if - \c else ou équivalent.
  - Une StructureSiSinon est composée d'une ConditionSi qui prend la forme d'une expression booléene 
    et d'une ConditionSinon correspondant à l'inverse de l'expression booléenne exprimée dans la ConditionSi ;
  - Si l'expression booléenne de la ConditionSi est vérifiée, la ConditionSi déclenche alors l'exécution 
    d'un ou plusieurs Traitement. 
  - Si l'expression booléenne de la ConditionSi n'est pas vérifiiée, la ConditionSinon déclenche alors l'exécution 
    d'un ou plusieurs Traitement. 

A noter que les structures conditionnelles du type ci-dessous (C, C++, Java, PHP...) sont assimilées à une 
StructureSiSinon :
  \code{.cpp}
  return (age >= 18 ? "majeur" : "mineur");
  \endcode


 \section classe-structure-si-si La classe StructureSiSi
  La classe StructureSiSi représente une structure conditionnelle :
  - avec des ConditionSi multiples situées à un même niveau de hierarchie ;
  - sans ConditionSinon.

  Ce type de structure correspond par exemple à l'instruction :
  - \c if - \c elseif  en PHP ;
  - \c if - \c elsif en ADA.

  Une StructureSiSi est composée d'au moins deux ConditionSi qui prennent chacune la forme d'une expression booléene. 
  A chacune de ces expressions booléenne correspond 1 ou plusieurs Traitement qui sont déclenchés lorsque l'expression
  booléene est vérifiée. 
  
  A noter que si aucune expression booléene n'est vérifiée, aucun traitement n'est déclenché.


 \section classe-structure-si-si-sinon La classe StructureSiSiSinon
  La classe StructureSiSiSinon représente une structure conditionnelle :
  - avec des ConditionSi multiples situées à un même niveau de hierarchie ;
  - avec une ConditionSinon.

  Ce type de structure correspond par exemple à l'instruction :
  - \c if - \c elseif \c else en PHP ;
  - \c if - \c elsif \c else en ADA.

  Une StructureSiSiSinon est composée :
  - d'au moins deux ConditionSi qui prennent chacune la forme d'une expression booléene. 
    A chacune de ces expressions booléenne correspond un ou plusieurs Traitement qui sont déclenchés 
    lorsque l'expression booléene est vérifiée.
  - d'une ConditionSinon à laquelle sont associés un ou plusieurs Traitement qui sont déclenchés si aucune 
    expression booléene des ConditionSi n'est vérifiée. 

 A noter que contrairement à une StructureSiSi, une StructureSiSiSinon déclenche toujours au moins 
 un traitement du fait de la présence d'une ConditionSinon.


 \section classe-structure-switch La classe StructureSwitch
  La classe StructureSwitch représente une structure conditionnelle basée sur la valeur d'une expression. 
  Elle correspond à une structure \c switch dans la plupart des langages de programmation (C++, java, php...) 
  ou encore \c case en ADA.

  Ce type de structure est composée : 
  - d'une expression dont la valeur doit être évaluée ;
  - de plusieurs ConditionSwitch qui sont chacune associée au déclenchement d'un ou plusieurs Traitement ;
  - éventuellement d'une ConditionSinon qui pourra déclencher un ou plusieurs Traitement si aucune ConditionSwitch n'est vérifiée.

  Chaque ConditionSwitch est caractérisée par une valeur. Si cette valeur est égale à la valeur de l'expression de la 
  StructureSwitch, alors les Traitement associés à la ConditionSwitch concernée sont déclenchés.

*/






/*! \page modele-structure-iterative Structures itératives
 Cette partie du diagramme décrit les caractéristiques des structures itératives qu'on peut retrouver dans un code.

 \n
  \image html 5-diagramme-classes-structure-iterative.jpg  width=90%
  \image rtf 5-diagramme-classes-structure-iterative.jpg  width=90%
  \image latex 5-diagramme-classes-structure-iterative.pdf width=\textwidth 
\n

 \section classe-structure-iterative La classe StructureIterative
  Une StructureIterative permet de répéter l'exécution de un ou plusieurs Traitement. 
  On distingue deux familles de structures itératives :
  - les IterationAvecNombreDeRepetitionsConnu ;
  - les IterationAvecNombreDeRepetitionsInconnu.


 \section classe-iteration-avec-nbre-repet-connu La classe IterationAvecNombreDeRepetitionsConnu
  La classe IterationAvecNombreDeRepetitionsConnu représente des structures itératives permettant 
  d'exécuter un ou plusieurs Traitement un nombre de fois connu.

  Ce type de structure itérative correspond généralement à une instruction de type \c for (C++, Java, Python, PHP...), 
  \c foreach (javascript, PHP...) ou encore \c PERFORM \c N \c TIMES en Cobol.
    
 Une IterationAvecNombreDeRepetitionsConnu intègre généralement :
 - une borne de départ correspondant à la première itération et une borne d'arrivée 
   à atteindre correspondant à la dernière itération ; 
 - une ConditionDeBoucle qui prend généralement la forme d'une ConditionDeContinuation exprimant le fait que 
   l'IterationAvecNombreDeRepetitionsConnu perdure tant que la borne d'arrivée n'est pas atteinte. 
 
 Une IterationAvecNombreDeRepetitionsConnu peut intégrer un IndiceDeBoucle (instruction \c for) mais
 ce n'est pas obligatoire (instructions \c foreach ou \c PERFORM \c N \c TIMES de Cobol).
 

 \section classe-indice-de-boucle La classe IndiceDeBoucle
  La classe IndiceDeBoucle est utilisée au sein d'IterationAvecNombreDeRepetitionsConnu. Cet indice représente 
  la progression de l'itération sur l'intervalle [borne de départ ; borne d'arrivée] 
  de l'IterationAvecNombreDeRepetitionsConnu.

  Un IndiceDeBoucle est généralement représenté par un entier ou un caractère appartenant à [borne de départ ; borne d'arrivée].
  Au fur et à mesure des itérations, cet IndiceDeBoucle progresse :
  - soit de manière croissante (boucle croissante), soit de manière décroissante (boucle décroissante) ;
  - d'une valeur (pas) définie par le programmeur.

  Dans une IterationAvecNombreDeRepetitionsConnu codée via une instruction \c for, l'IndiceDeBoucle
  est utilisé pour exprimer la ConditionDeContinuation de l'itération. 

  A noter également que l'IndiceDeBoucle peut être exploité dans le Traitement répété. Dans ce cas,
  les valeurs de la borne de départ et de la borne d'arrivée ont une importance capitale. A l'inverse,
  si l'IndiceDeBoucle n'est pas utilisé dans le Traitement répété les valeurs de la borne de départ 
  et de la borne d'arrivée ne sont pas importantes du moment qu'elles permettent de réaliser le 
  nombre de répétitions souhaité.


 \section classe-iteration-avec-nbre-repet-inconnu La classe IterationAvecNombreDeRepetitionsInconnu

  Cette classe représente des structures itératives pour lesquelles le nombre de répétitions n'est pas connu à l'avance. 
  Le nombre de répétitions est dépendant d'une ou plusieurs ConditionDeBoucle qui, selon les cas, peuvent prendre
  la forme d'une ConditionDeContinuation ou d'une ConditionDArret. 

  On recense plusieurs familles d'IterationAvecNombreDeRepetitionsInconnu, ces familles se distinguant en fonction
  du **moment** où la ou les ConditionDeBoucle sont évaluées :
  - IterationAvecConditionAuDebut : La ou les ConditionDeBoucle sont évaluées en même temps et au début de l'itération ;
  - IterationAvecConditionALaFin : La ou les ConditionDeBoucle sont évaluées en même temps et à la fin de l'itération ;
  - IterationAvecConditionAuMilieu : La ou les ConditionDeBoucle sont évaluées en même temps et au milieu de l'itération ;
  - IterationAvecPlusieursConditionADifferentsMoments : Il y a plusieurs ConditionDeBoucle et elles sont évaluées à des
    moments différents au sein de l'itération.


 \section classe-iteration-avec-condition-au-debut La classe IterationAvecConditionAuDebut
 Cette classe représente des itérations intégrant une ou plusieurs ConditionDeBoucle regroupées et évaluées 
 **au début** de l'itération.

  Généralement, ce type d'itération se code avec une instruction \c while et la ConditionDeBoucle correspond alors 
  à une ConditionDeContinuation :
  \code{.cpp}
  while (nbEssai < 10)
  {
    // Effectuer une nouvel essai
    ...
    ...
  }
  \endcode

  On peut toutefois trouver d'autres formes (moins appropriées) dans lesquelles l'IterationAvecConditionAuDebut 
  est codée avec un \c while ou un \c for dévié de leur usage initial. Dans ce cas, la ConditionDeBoucle prend 
  la forme d'une ConditionDArret :
  \code{.cpp}
  while (true)
  {
    if (nbEssais >= 10)
    {
       break;
    }

    // Effectuer une nouvel essai
    ...
    ...
  }
  \endcode

  ou encore :
  \code{.cpp}
  for ( ; ; )
  {
    if (nbEssais >= 10)
    {
       break;
    }

    // Effectuer une nouvel essai
    ...
    ...
  }
  \endcode  



\section classe-iteration-avec-condition-en-fin La classe IterationAvecConditionEnFin
 Cette classe représente des itérations intégrant une ou plusieurs ConditionDeBoucle regroupées et évaluées 
 **à la fin** de l'itération.

  Généralement, ce type d'itération se code avec une instruction \c do \c .. \c while et la ConditionDeBoucle 
  correspond alors à une ConditionDeContinuation :
  \code{.cpp}
  do 
  {
    cout << "Entrer un nombre positif : ";
    cin >> nombre;
  }
  while (nombre <= 0);
  \endcode

  On peut toutefois trouver d'autres formes (moins appropriées) dans lesquelles l'IterationAvecConditionEnFin 
  est codée avec un \c while ou un \c for dévié de leur usage initial. Dans ce cas, la ConditionDeBoucle prend 
  la forme d'une ConditionDArret :
  \code{.cpp}
  while (true)
  {
    cout << "Entrer un nombre positif : ";
    cin >> nombre;

    if (nombre > 0)
    {
      break;
    }
  }
  \endcode

  ou encore :
  \code{.cpp}
  for ( ; ; )
  {
    cout << "Entrer un nombre positif : ";
    cin >> nombre;

    if (nombre > 0)
    {
      break;
    }
  }
  \endcode  


\section classe-iteration-avec-condition-au-milieu La classe IterationAvecConditionAuMilieu
 Cette classe représente des itérations intégrant une ou plusieurs ConditionDeBoucle regroupées et évaluées 
 **en plein milieu** de l'itération, c'est-à-dire, ni au début, ni à la fin.

  Peu de langages de programmation proposent des instructions spécialisées pour traiter ce cas de figure. Le 
  langage Ada propose par exemple l'instruction \c loop \c .. \c end \c loop qui ne présume pas de la 
  position de la condition d'arrêt (contrairement à un \c while ou un \c do \c .. \ while) :
  \code
  loop
     Put("Entrer un nombre positif : ") ; 
     Get-Line(nombre);
     exit when nombre > 0;
     nbreSaisiesErronees := nbreSaisiesErronees + 1;
  end loop;
  \endcode
  
  \n
  Avec la plupart des langages de programmation qui ne proposent pas d'instruction spécialisée pour traiter
  ce cas de figure, il est nécessaire de dévier une instruction répétitive de son usage initial pour la 
  transformer en itération infinie et dans laquelle on insère, au niveau du corps, une ConditionDArret :
  \code{.cpp}
  while (true)
  {
    cout << "Entrer un nombre positif : ";
    cin >> nombre;

    if (nombre > 0)
    {
      break;
    }

    nbreSaisiesErronees++;
  }
  \endcode

  ou encore :
  \code{.cpp}
  for ( ; ; )
  {
    cout << "Entrer un nombre positif : ";
    cin >> nombre;

    if (nombre > 0)
    {
      break;
    }
  }
  \endcode 



  \section classe-iteration-avec-plusieurs-conditions La classe IterationAvecConditionsADifferentsMoments
 Cette classe représente tous les autres cas de figure qui ne rentrent pas dans les cas précédents. 

 Ce type d'itération est caractérisé par la présence de plusieurs ConditionDeBoucle qui peuvent prendre
 la forme de ConditionDeContinuation et/ou de ConditionDArret, bien qu'il soit recommandé de ne pas les 
 mélanger. Ci-dessous quelques exemples :


 Itération composée uniquement de ConditionDArret :
  \code{.cpp}
  while (true)
  {
    if (nbEssais >= 10)
    {
      break;
    }

    cout << "Entrer un nombre positif : ";
    cin >> nombre;
    
    if (nombre > 0)
    {
      break;
    }
  
    nbEssais++;
  }
  \endcode 

 
 La même itération mélangeant ConditionDeContinuation et ConditionDArret :
  \code{.cpp}
  while (nbEssais < 10)
  {
    cout << "Entrer un nombre positif : ";
    cin >> nombre;
    
    if (nombre > 0)
    {
      break;
    }
  
    nbEssais++;
  }
  \endcode 



*/




/*! \page diagramme-objet Exemple de diagramme objet
  Even more info.
*/